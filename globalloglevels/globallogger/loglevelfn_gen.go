// Code generated by "gen_logfn2 -packagename global_logger -outputfilename lib/log/global_logger/loglevelfn_gen.go -levelpackagefolder lib/log/globalloglevels -leveltypename LL_Type"

package globallogger

import (
	"fmt"

	"github.com/kasworld/log/globalloglevels"
)

func Fatal(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Fatal, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Fatal, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithFatalLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Fatal, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Fatal, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func Error(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Error, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Error, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithErrorLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Error, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Error, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func Warn(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Warn, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Warn, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithWarnLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Warn, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Warn, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceService(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceService, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceService, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceServiceLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceService, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceService, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func Monitor(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Monitor, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Monitor, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithMonitorLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Monitor, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Monitor, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func Debug(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Debug, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Debug, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithDebugLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Debug, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Debug, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func AdminAudit(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_AdminAudit, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_AdminAudit, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithAdminAuditLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_AdminAudit, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_AdminAudit, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func Analysis(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Analysis, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Analysis, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithAnalysisLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_Analysis, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_Analysis, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceUser(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceUser, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceUser, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceUserLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceUser, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceUser, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceClient(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceClient, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceClient, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceClientLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceClient, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceClient, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceAO(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceAO, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceAO, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceAOLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceAO, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceAO, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceAI(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceAI, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceAI, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceAILog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceAI, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceAI, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceTask(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceTask, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceTask, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceTaskLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceTask, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceTask, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceSuspect(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceSuspect, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceSuspect, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceSuspectLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceSuspect, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceSuspect, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}

func TraceRPC(format string, v ...interface{}) {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceRPC, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceRPC, s)
	if err != nil {
		fmt.Println(err)
	}
}
func NewErrorWithTraceRPCLog(format string, v ...interface{}) error {
	s := GlobalLogger.Format2Bytes(2, globalloglevels.LL_TraceRPC, format, v...)
	err := GlobalLogger.Output(globalloglevels.LL_TraceRPC, s)
	if err != nil {
		fmt.Println(err)
	}
	return fmt.Errorf(format, v...)
}
