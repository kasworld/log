// Copyright 2015 SeukWon Kang (kasworld@gmail.com)
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// python like log package
// can use instead of standard log package
package log

import (
	"bytes"
	"fmt"
)

//go:generate stringer -type=LF_Type
type LF_Type int

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	LF_date         LF_Type = 1 << iota // the date in the local time zone: 2009/01/23
	LF_time                             // the time in the local time zone: 01:23:23
	LF_microseconds                     // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	LF_longfile                         // full file name and line number: /a/b/c/d.go:23
	LF_shortfile                        // final file name element and line number: d.go:23. overrides Llongfile
	LF_functionname
	LF_prefix
	LF_UTC // if Ldate or Ltime is set, use UTC rather than the local time zone
	LF_END
	LF_stdFlags = LF_date | LF_time // initial values for the standard logger
)

//go:generate stringer -type=LL_Type
type LL_Type int

const (
	LL_Fatal LL_Type = 1 << iota
	LL_Error
	LL_Warn
	LL_Debug
	LL_Info
	LL_END
	LL_All = LL_Debug | LL_Info | LL_Warn | LL_Error | LL_Fatal
)

func (ll LL_Type) LevelString() string {
	var buff bytes.Buffer
	buff.WriteString("LogLevel[")
	for i := LL_Type(1); i < LL_END; i <<= 1 {
		if ll&i != 0 {
			fmt.Fprintf(&buff, "%s ", i)
		}
	}
	buff.WriteString("]")
	return buff.String()
}

func (lf LF_Type) FlagString() string {
	var buff bytes.Buffer
	buff.WriteString("LogFlag[")
	for i := LF_Type(1); i < LF_END; i <<= 1 {
		if lf&i != 0 {
			fmt.Fprintf(&buff, "%s ", i)
		}
	}
	buff.WriteString("]")
	return buff.String()
}

func AllLevelString() string {
	var buff bytes.Buffer
	buff.WriteString("LogLevel[")
	for i := LL_Type(1); i < LL_END; i <<= 1 {
		fmt.Fprintf(&buff, "%s ", i)
	}
	buff.WriteString("]")
	return buff.String()
}
