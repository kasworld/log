// Code generated by "genlog -leveldatafile basiclevel.data -packagename=basiclog"

package basiclog

import "fmt"

const (
	LL_Fatal LL_Type = 1 << iota //
	LL_Error                     //
	LL_Warn                      //
	LL_Debug                     //

	LL_END
	LL_All = LL_END - 1
)

var leveldata = map[LL_Type]string{
	1: "Fatal",
	2: "Error",
	4: "Warn",
	8: "Debug",

	16: "END",
}

func Fatal(format string, v ...interface{}) {
	if !GlobalLogger.IsLevel(LL_Fatal) {
		return
	}
	s := GlobalLogger.Format2Bytes(1, LL_Fatal, format, v...)
	err := GlobalLogger.Output(LL_Fatal, s)
	if err != nil {
		fmt.Println(err)
	}
}

func (l *LogBase) Fatal(format string, v ...interface{}) {
	if !l.IsLevel(LL_Fatal) {
		return
	}
	s := l.Format2Bytes(1, LL_Fatal, format, v...)
	err := l.Output(LL_Fatal, s)
	if err != nil {
		fmt.Println(err)
	}
}

func Error(format string, v ...interface{}) {
	if !GlobalLogger.IsLevel(LL_Error) {
		return
	}
	s := GlobalLogger.Format2Bytes(1, LL_Error, format, v...)
	err := GlobalLogger.Output(LL_Error, s)
	if err != nil {
		fmt.Println(err)
	}
}

func (l *LogBase) Error(format string, v ...interface{}) {
	if !l.IsLevel(LL_Error) {
		return
	}
	s := l.Format2Bytes(1, LL_Error, format, v...)
	err := l.Output(LL_Error, s)
	if err != nil {
		fmt.Println(err)
	}
}

func Warn(format string, v ...interface{}) {
	if !GlobalLogger.IsLevel(LL_Warn) {
		return
	}
	s := GlobalLogger.Format2Bytes(1, LL_Warn, format, v...)
	err := GlobalLogger.Output(LL_Warn, s)
	if err != nil {
		fmt.Println(err)
	}
}

func (l *LogBase) Warn(format string, v ...interface{}) {
	if !l.IsLevel(LL_Warn) {
		return
	}
	s := l.Format2Bytes(1, LL_Warn, format, v...)
	err := l.Output(LL_Warn, s)
	if err != nil {
		fmt.Println(err)
	}
}

func Debug(format string, v ...interface{}) {
	if !GlobalLogger.IsLevel(LL_Debug) {
		return
	}
	s := GlobalLogger.Format2Bytes(1, LL_Debug, format, v...)
	err := GlobalLogger.Output(LL_Debug, s)
	if err != nil {
		fmt.Println(err)
	}
}

func (l *LogBase) Debug(format string, v ...interface{}) {
	if !l.IsLevel(LL_Debug) {
		return
	}
	s := l.Format2Bytes(1, LL_Debug, format, v...)
	err := l.Output(LL_Debug, s)
	if err != nil {
		fmt.Println(err)
	}
}
