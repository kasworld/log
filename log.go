// Copyright 2015 SeukWon Kang (kasworld@gmail.com)
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// python like log package
// can use instead of standard log package
package log

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota // the date in the local time zone: 2009/01/23
	Ltime                     // the time in the local time zone: 01:23:23
	Lmicroseconds             // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                 // full file name and line number: /a/b/c/d.go:23
	Lshortfile                // final file name element and line number: d.go:23. overrides Llongfile
	Lfunctionname
	Lprefix
	LUTC                      // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags = Ldate | Ltime // initial values for the standard logger
)

const (
	LL_Debug = 1 << iota
	LL_Info
	LL_Warn
	LL_Error
	LL_Fatal
	LL_All = LL_Debug | LL_Info | LL_Warn | LL_Error | LL_Fatal
)

var LogLevel2str = map[int]string{
	LL_Debug: "Debug",
	LL_Info:  "Info",
	LL_Warn:  "Warn",
	LL_Error: "Error",
	LL_Fatal: "Fatal",
}

type Log struct {
	mu       sync.Mutex // ensures atomic writes; protects the following fields
	flag     int        // properties
	prefix   string     // prefix to write at beginning of each line
	loglevel int
	out      io.WriteCloser
	filename string
	buf      []byte // for accumulating text to write
}

func New(w io.WriteCloser, prefix string, loglevel int, release bool) *Log {
	flags := LstdFlags
	if !release {
		flags = Ltime | Lshortfile | Lfunctionname
	}

	l := Log{
		prefix:   prefix,
		flag:     flags,
		loglevel: loglevel,
		out:      w,
	}
	return &l
}

func NewFile(filename string, prefix string, loglevel int, release bool) (*Log, error) {
	f, err := os.OpenFile(filename, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0666)
	if err != nil {
		return nil, err
	}
	l := New(f, prefix, loglevel, release)
	l.filename = filename
	return l, nil
}

func (l *Log) Reload() error {
	if l.filename == "" {
		return fmt.Errorf("not file log")
	}
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out.Close()

	out, err := os.OpenFile(l.filename, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0666)
	if err != nil {
		return err
	}
	l.out = out
	return nil
}

/////////

func (l Log) printf(ll int, format string, v ...interface{}) error {
	if !l.IsLevel(ll) {
		return nil
	}
	calldepth := 2
	llinfo := LogLevel2str[ll]
	s := fmt.Sprintf(format, v...)

	// log.output
	now := time.Now() // get this early.
	var file string
	var fnname string
	var line int
	var pc uintptr
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile|Lfunctionname) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		pc, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
			fnname = "???"
		} else if l.flag&Lfunctionname != 0 {
			fn := runtime.FuncForPC(pc)
			fnname = fn.Name()
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(&l.buf, llinfo, now, file, line, fnname)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

func (l *Log) formatHeader(buf *[]byte, llinfo string, t time.Time, file string, line int, fnname string) {
	if l.flag&Lprefix != 0 {
		*buf = append(*buf, l.prefix...)
		*buf = append(*buf, ' ')
	}
	*buf = append(*buf, llinfo...)
	*buf = append(*buf, ' ')
	if l.flag&LUTC != 0 {
		t = t.UTC()
	}
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		if l.flag&(Lfunctionname) != 0 {
			*buf = append(*buf, ':')
			*buf = append(*buf, fnname...)
		}
		*buf = append(*buf, ": "...)
	}
}

/////////

func (l *Log) SetPrefix(p string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = p
}

// Prefix returns the output prefix for the logger.
func (l Log) GetPrefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// Flags returns the output flags for the logger.
func (l Log) GetFlags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Log) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

func (l Log) String() string {
	levelstr := ""
	for i, v := range LogLevel2str {
		if l.IsLevel(i) {
			levelstr += v + " "
		}
	}
	return fmt.Sprintf("log level is %v", levelstr)
}
func (l *Log) AddLevel(level int) {
	l.loglevel |= level
}
func (l *Log) SetLevel(level int) {
	l.loglevel = level
}
func (l *Log) DelLevel(level int) {
	l.loglevel &= ^level
}
func (l *Log) IsLevel(level int) bool {
	return l.loglevel&level != 0
}

func (l Log) Info(format string, v ...interface{}) {
	l.printf(LL_Info, format, v...)
}
func (l Log) Warn(format string, v ...interface{}) {
	l.printf(LL_Warn, format, v...)
}
func (l Log) Debug(format string, v ...interface{}) {
	l.printf(LL_Debug, format, v...)
}
func (l Log) Error(format string, v ...interface{}) {
	l.printf(LL_Error, format, v...)
}
func (l Log) Fatal(format string, v ...interface{}) {
	l.printf(LL_Fatal, format, v...)
	os.Exit(1)
}

////////

//// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}
